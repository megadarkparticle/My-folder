from numpy import exp, array, random, dot

class NeuralNetwork():
    def __init__(self):
        #seed the random generation for debugging
        random.seed(1)
        
        #design  3 inputs and 1 outputs so 3x1 matrix with value range from -1 to 1
        
        self.synaptic_weights = 2*random.random((3,1)) -1
    
    #gradient of the sigmoid curve 
    def __sigmoid_derivative(self,x):
        return x*(1-x)
        
    #The sigmoid function
    def __sigmoid(self, x):
        return 1/(1+exp(-x))
    
    def train(self, training_set_inputs, training_set_outputs, number_of_training_iterations):
        for iteration in range(number_of_training_iterations):
            output = self.predict(training_set_inputs)
            
            #calculate the error
            error = training_set_outputs - output
            
            #multiply the error by the input ad again by the gradient of the sigmoid curve
            adjustment = dot(training_set_inputs.T, error*self.__sigmoid_derivative(output))
            
            self.synaptic_weights += adjustment
    
    def predict(self,inputs):
        #pass inputs through our
        return self.__sigmoid(dot(inputs,self.synaptic_weights))


if __name__ == '__main__':
    
    #initialise a single neuron neural network
    neural_network = NeuralNetwork()
    
    print('Random starting synaptic weights:')
    print(neural_network.synaptic_weights)
    
    #training set. We have 4 examples, each consisting of 3 input values
    # and 1 output value.
    training_set_inputs = array([[0,0,1],[1,1,1],[1,0,1],[0,1,1]])
    training_set_outputs = array([[0,1,1,0]]).T
    
    #train the neural network using a training set.
    #Do it 10,000 times and make small adjsutments each time
    neural_network.train(training_set_inputs, training_set_outputs, 10000)
    print("New synaptic weights after training: ")
    print(neural_network.synaptic_weights)
    
    #Test the neutral network with a new situation 
    print("Considering new situation [1,0,0] -> ?: ")
    print(neural_network.predict(array([1,0,0])))
    
